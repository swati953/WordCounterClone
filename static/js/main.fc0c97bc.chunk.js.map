{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","color","backgroundColor","myStyle","setmyStyle","btnText","setbtnText","className","style","id","type","onClick","border","Navbar","props","mode","to","title","aboutText","toggleMode","htmlFor","TextForm","search","setSearch","text","setText","heading","value","onChange","event","console","log","target","rows","placeholder","split","length","newText","toUpperCase","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","join","innerHTML","match","extractEmails","error","alert","extractPhone","defaultProps","App","setMode","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.fc0c97bc.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport default function About() {\r\n  const [myStyle, setmyStyle] = useState({\r\n    color: \"black\",\r\n    backgroundColor: \"white\",\r\n  });\r\n  const [btnText, setbtnText] = useState(\"Enable dark mode\")\r\n  const toggleStyle = () => {\r\n    if (myStyle.color === \"black\") {\r\n      setmyStyle({\r\n        color: \"white\",\r\n        backgroundColor: \"black\",\r\n        border: \"1px solid white\",\r\n      });\r\n      setbtnText(\"Enable Light mode\");\r\n    } else {\r\n      setmyStyle({ color: \"black\", backgroundColor: \"white\" });\r\n      setbtnText(\"Enable Dark  mode\");\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"container\" style={myStyle}>\r\n      <h2 className=\"my-3\">About Us</h2>\r\n      <div className=\"accordion\" id=\"accordionExample\">\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingOne\">\r\n            <button\r\n              className=\"accordion-button\"\r\n              style={myStyle}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\"\r\n            >\r\n              Accordion Item #1\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            className=\"accordion-collapse collapse show\"\r\n            aria-labelledby=\"headingOne\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the first item's accordion body.</strong> It is\r\n              shown by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees\r\n              control the overall appearance, as well as the showing and hiding\r\n              via CSS transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              style={myStyle}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\"\r\n            >\r\n              Accordion Item #2\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingTwo\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the second item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees\r\n              control the overall appearance, as well as the showing and hiding\r\n              via CSS transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              style={myStyle}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\"\r\n            >\r\n              Accordion Item #3\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingThree\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the third item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees\r\n              control the overall appearance, as well as the showing and hiding\r\n              via CSS transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <button type=\"button\" onClick={toggleStyle} className=\"btn btn-primary\">\r\n        {btnText}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import PropTypes from \"prop-types\";\r\nimport React from 'react'\r\nimport { Link} from \"react-router-dom\";\r\n\r\n\r\nexport default function Navbar(props) {\r\n  \r\n  \r\n  \r\n  return (\r\n    <>\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\">\r\n          {props.title}\r\n        </Link>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                Home\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">\r\n                {props.aboutText}\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n          {/* <form className=\"d-flex\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form> */}\r\n          <div className={`form-check form-switch text-${props.mode==='dark'? 'light':'dark'}`}>\r\n            <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} id=\"flexSwitchCheckDefault\" />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark mode enable</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      </nav>\r\n      {/* <p>searchItem:-{search}</p> */}\r\n      </>\r\n  );\r\n}\r\n\r\n//the below code is written to avoid unexppected inputs\r\nNavbar.propTypes = { title: PropTypes.string.isRequired, aboutText: PropTypes.string.isRequired };\r\n//Default props :- Those which appear when we don't pass anything || Below code\r\nNavbar.defaultProps = {\r\n  title: 'Title apper here',\r\n  aboutText: 'About text here'\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\nconst handleUpClick = () => {\r\n    // console.log(\"uppercase was clciked here..\");\r\n    // setText(\"you have clicked on upper case\");\r\n    console.log(\"uppercase was clciked here..\" + text);\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n  };\r\n  const handleLoClick = () => {\r\n    console.log(\"uppercase was clciked here..\" + text);\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n  };\r\n  //copy the content \r\n  const handleCopyClick=()=>{\r\n    let text=document.getElementById(\"myBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n  }\r\n  //removing extra spaces\r\n  const handleExtraSpaces=()=>{\r\n    let newText=text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n  }\r\n  //clear the box\r\n  const handleClear=()=>{\r\n    let newText=' ';\r\n    setText(newText);\r\n  }\r\n\r\n\r\n   function extractEmails (text)\r\n   {\r\n       return text.match(/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9._-]+)/g);\r\n   }\r\n   \r\n  const handleEmailExtractor=()=>{\r\n    //  console.log(extractEmails(text).join('\\n'));\r\n    // let hold2=extractEmails(text).join('\\n');\r\n    try{\r\n      document.getElementById(\"output\").innerHTML=extractEmails(text).join('<br>');\r\n    }\r\n    catch(error)\r\n    {\r\n      alert(\"please enter a valid Email\");\r\n    }\r\n\r\n    // setText(extractEmails(text).join('\\n'));\r\n  }\r\n  function extractPhone (text)\r\n  {\r\n      // return text.match(/(\\w?\\d+\\w?)/g);\r\n      if (text.match(/(\\w?\\d+\\w?)/g))\r\n      {\r\n        return text.match(/(\\d+)/g);\r\n      }\r\n  }\r\n  const handlePhone=()=>{\r\n    try{\r\n      document.getElementById(\"output\").innerHTML=extractPhone(text).join('<br>');\r\n    }\r\n    catch(error)\r\n    {\r\n      alert(\"please enter a valid number\");\r\n    }\r\n  }\r\n  const handleOnChange = (event) => {\r\n    console.log(\"handleOnChange was clciked here..\");\r\n    setText(event.target.value);\r\n  };\r\n//searching\r\nconst [search, setSearch] = useState(\"\");\r\nconst handleOnChangeSearch = (event) => {\r\n  \r\n  setSearch(event.target.value);\r\n};\r\nconst handleSearch=()=>{\r\n  console.log(\"handleSearch was clciked here..\");\r\n  console.log(text.match(search));\r\n  // document.getElementById(\"output\").innerHTML=text.match(search);\r\n  // text.match(search);\r\n}\r\n  const [text, setText] = useState(\"\");\r\n  // text=\"gkdshgk\";  // error not change the state directly\r\n  // setText(\"new text\");\r\n  \r\n  return (\r\n    <>\r\n      <div className=\"container\" style={{color:props.mode==='dark'? 'white':'black'}}>\r\n        {/* <h1>{props.heading}-{text}</h1>  we use this to show changes by const [state, setstate] = useState(initialState)*/}\r\n        <h1 className=\"headingTextform\">{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          {/* <label htmlFor=\"myBox\"  className=\"form-label\">Example textarea</label> */}\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            style={{backgroundColor:props.mode==='dark'? 'grey':'white', color:props.mode==='dark'? 'white':'black'}}\r\n            onChange={handleOnChange}\r\n            id=\"myBox\"\r\n            rows=\"8\"\r\n            placeholder=\"Enter something here....\"\r\n          ></textarea>\r\n        </div >\r\n        <div className=\"container my-3\" style={{color:props.mode==='dark'? 'white':'black'}}>\r\n        <p>{text.split(\" \").length} Words and {text.length} Characters, {0.008 * text.split(\" \").length} Minutes to read.</p>\r\n      </div>\r\n        <div className=\"contanier btnTextformDiv\">\r\n        <button className=\"btn btn-primary mx-3 my-3 btnTextform\" onClick={handleUpClick}>\r\n          Convert to Upper Case\r\n        </button>\r\n        <button className=\"btn btn-primary mx-3 my-3 btnTextform\" onClick={handleLoClick}>\r\n          Convert to Lower Case\r\n        </button>\r\n        <button className=\"btn btn-primary mx-3 my-3 btnTextform\" onClick={handleCopyClick}>\r\n          Copy the Content\r\n        </button>\r\n        <button className=\"btn btn-primary mx-3 my-3 btnTextform\" onClick={handleExtraSpaces}>\r\n          Remove Extra Spaces\r\n        </button>\r\n        <button className=\"btn btn-primary mx-3 my-3 btnTextform\" onClick={handleClear}>\r\n          Clear\r\n        </button>\r\n        <button className=\"btn btn-primary mx-3 my-3 btnTextform\" onClick={handleEmailExtractor}>\r\n          Extract Email Address\r\n        </button>\r\n        <button className=\"btn btn-primary mx-3 my-3 btnTextform\" onClick={handlePhone}>\r\n        \r\n          Extract Phone number\r\n        </button>\r\n        </div>\r\n\r\n      </div>\r\n      <div className=\"container my-3 headingTextform\" style={{color:props.mode==='dark'? 'white':'black'}}>\r\n        {/* <h2>Your Text Summary</h2> */}\r\n        {/* <p>\r\n          {text.split(\" \").length} Words and {text.length} Characters, {0.008 * text.split(\" \").length} Minutes to read.</p> */}\r\n        <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" id=\"searchBtn\" type=\"search\"  aria-label=\"Search\" value={search} placeholder=\"Enter to search\" onChange={handleOnChangeSearch}/>\r\n        <button className=\"btn btn-primary mx-3 my-3 btnTextform\" onClick={handleSearch}>search</button>\r\n      </form>\r\n        <h1>Preview Text</h1>\r\n        {/* <p>{text.length>0?text:\"Enter something above to see its preview here\"}</p> */}\r\n        {/* <p id=\"output\">this is </p> */}\r\n          <div className=\"previewTextform\">\r\n            <div className=\"preview\">\r\n            <p>{text.length>0?text:\"Enter something above to see its preview here\"}</p> \r\n            </div>\r\n            <hr />\r\n            <div className=\"extract\">\r\n            <p id=\"output\"></p>\r\n            </div>\r\n          </div>\r\n      </div>\r\n\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\n\nimport \"./App.css\";\nimport About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\n\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#0e0e33\";\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n    }\n  };\n  return (\n    // <> use to embeed two or more components beacuse one fucntion acan only return one components\n    <>\n      {/* The below code is used to show navbar propTypes to avoid unexpected input */}\n      {/* <Navbar title={8}/> */}\n\n      {/* the below line is used to show the defaultProps  */}\n      {/* <Navbar/> */}\n\n      {/* the below code is what we gone use  */}\n      <Router>\n      <Navbar\n        title=\"WordCounterClone\"\n        aboutText=\"About Us\"\n        mode={mode}\n        toggleMode={toggleMode}\n      />\n      <div className=\"container my-3\">\n        <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\">\n            <TextForm heading=\"Welcome To our WordCounterClone\" mode={mode} />\n          </Route>\n        </Switch>\n      </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}